#!/usr/bin/env ruby

$LOAD_PATH << 'lib'

require 'classifier'
require 'tokeniser'

EXAMPLES = File.open('data/SMSSpamCollection').map do |line|
  label, text = line.strip.split("\t")

  [Tokeniser.new.tokenise(text), label]
end

TRAINING_SIZE = 1000

def backtest_with_training_range(from, to)
  classifier = Classifier.new

  training = EXAMPLES[from...to]
  test = EXAMPLES[0..from] + EXAMPLES[to..EXAMPLES.count]

  classifier.train(training)

  corrects = 0
  wrongs = 0

  measure = Hash.new(0)

  test.each do |featureset, label|
    guess = classifier.classify(featureset)

    case label
    when "spam"
      if guess == label
        measure[:true_positives] += 1
      else
        measure[:false_positives] += 1
      end
    when "ham"
      if guess == label
        measure[:true_negatives] += 1
      else
        measure[:false_negatives] += 1
      end
    end
  end

  measure
end

total_measure = Hash.new(0)

measure = (0..EXAMPLES.count - TRAINING_SIZE).step(TRAINING_SIZE).each do |index|
  chunk_measure = backtest_with_training_range(index, index + TRAINING_SIZE)
  chunk_measure.each do |key, val|
    total_measure[key] += val
  end
end

accuracy = (total_measure[:true_positives] + total_measure[:true_negatives]) / total_measure.values.reduce(&:+).to_f
percision = total_measure[:true_positives] / (total_measure[:true_positives] + total_measure[:false_positives]).to_f
recall = total_measure[:true_positives] / (total_measure[:true_positives] + total_measure[:false_negatives]).to_f

puts "Accuracy was #{accuracy * 100}%"
puts "Percision was #{percision * 100}%"
puts "Recall was #{recall * 100}%"
